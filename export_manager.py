# logic/export_manager.py
"""
Export functionality for ShopQuote
Handles PDF and TXT export with proper formatting and metadata
"""

import os
import json
from datetime import datetime
from typing import Dict, Any, List, Optional
from pathlib import Path

class ExportManager:
    """Manages export operations for quotes"""

    def __init__(self, export_dir: str = None):
        if export_dir is None:
            # Default to user's home directory
            home = Path.home()
            export_dir = home / ".shopquote" / "exports"

        self.export_dir = Path(export_dir)
        self.export_dir.mkdir(parents=True, exist_ok=True)

    def export_to_txt(self, quote_data: Dict[str, Any], operations: List[Dict[str, Any]],
                     pricing_data: Dict[str, Any], filename: Optional[str] = None) -> str:
        """Export quote to TXT format"""
        try:
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                part_number = quote_data.get("part_number", "UNKNOWN").replace(" ", "_")
                filename = f"ShopQuote_{part_number}_{timestamp}.txt"

            filepath = self.export_dir / filename

            with open(filepath, 'w', encoding='utf-8') as f:
                # Header
                f.write("SHOPQUOTE - QUOTE SUMMARY\n")
                f.write("=" * 50 + "\n\n")

                # Quote Information
                f.write("QUOTE INFORMATION\n")
                f.write("-" * 20 + "\n")
                f.write(f"Quote #: {quote_data.get('quote_number', 'N/A')}\n")
                f.write(f"Customer: {quote_data.get('customer', 'N/A')}\n")
                f.write(f"Part Number: {quote_data.get('part_number', 'N/A')}\n")
                f.write(f"Description: {quote_data.get('description', 'N/A')}\n")
                f.write(f"Material: {quote_data.get('material', 'N/A')}\n")
                f.write(f"Thickness: {quote_data.get('thickness_in', 'N/A')} in\n")

                flat_size = quote_data.get('flat_size_in', {})
                if isinstance(flat_size, dict):
                    width = flat_size.get('width')
                    height = flat_size.get('height')
                    if width and height:
                        f.write(f"Flat Size: {width} √ó {height} in\n")

                f.write(f"Bend Count: {quote_data.get('bend_count', 0)}\n\n")

                # Operations
                f.write("OPERATIONS BREAKDOWN\n")
                f.write("-" * 20 + "\n")
                f.write("<10")
                f.write("-" * 70 + "\n")

                for op in operations:
                    seq = op.get('seq', '')
                    operation = op.get('operation', '')
                    setup = op.get('setup_min', 0)
                    ops_count = op.get('ops', 1)
                    time_sec = op.get('time_sec', 0)
                    cost = op.get('cost_per_part', 0.0)

                    f.write("<10")

                f.write("\n")

                # Hardware
                hardware = quote_data.get('hardware', [])
                if hardware:
                    f.write("HARDWARE\n")
                    f.write("-" * 10 + "\n")
                    for hw in hardware:
                        hw_type = hw.get('type', 'HW')
                        qty = hw.get('qty_per_part', 1)
                        cost = hw.get('unit_cost', 0.0)
                        f.write(f"‚Ä¢ {hw_type} (x{qty}) - ${cost:.2f} each\n")
                    f.write("\n")

                # Outside Processes
                outside_processes = quote_data.get('outside_processes', [])
                if outside_processes:
                    f.write("OUTSIDE PROCESSES\n")
                    f.write("-" * 17 + "\n")
                    for op in outside_processes:
                        label = op.get('label', 'Process')
                        cost = op.get('unit_cost_per_part', 0.0)
                        f.write(f"‚Ä¢ {label} - ${cost:.2f} per part\n")
                    f.write("\n")

                # Pricing Summary
                if pricing_data:
                    f.write("PRICING SUMMARY\n")
                    f.write("-" * 15 + "\n")

                    # Get pricing for different quantities
                    quantities = [1, 10, 25, 50]
                    for qty in quantities:
                        price = pricing_data.get('per_qty_grand', {}).get(qty, 0.0)
                        f.write(f"Quantity {qty}: ${price:.2f} per part\n")

                    f.write("\n")

                # Footer
                f.write(f"Generated by ShopQuote on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")

                # Add metadata snapshot
                f.write("\n" + "="*50 + "\n")
                f.write("METADATA SNAPSHOT START\n")
                metadata = {
                    "quote_data": quote_data,
                    "operations": operations,
                    "pricing": pricing_data,
                    "export_timestamp": datetime.now().isoformat()
                }
                json.dump(metadata, f, indent=2, default=str)
                f.write("\nMETADATA SNAPSHOT END\n")

            return str(filepath)

        except Exception as e:
            raise Exception(f"Error exporting to TXT: {str(e)}")

    def export_to_pdf(self, quote_data: Dict[str, Any], operations: List[Dict[str, Any]],
                     pricing_data: Dict[str, Any], filename: Optional[str] = None) -> str:
        """Export quote to PDF format"""
        try:
            # For now, create a simple HTML-based PDF approach
            # In a full implementation, this would use a proper PDF library

            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                part_number = quote_data.get("part_number", "UNKNOWN").replace(" ", "_")
                filename = f"ShopQuote_{part_number}_{timestamp}.pdf"

            # Create HTML content first
            html_content = self._generate_pdf_html(quote_data, operations, pricing_data)

            # Save HTML file (placeholder for PDF conversion)
            html_filepath = self.export_dir / filename.replace('.pdf', '.html')
            with open(html_filepath, 'w', encoding='utf-8') as f:
                f.write(html_content)

            # TODO: Convert HTML to PDF using weasyprint or similar
            # For now, return HTML path with note
            return str(html_filepath) + " (HTML format - PDF conversion pending)"

        except Exception as e:
            raise Exception(f"Error exporting to PDF: {str(e)}")

    def _generate_pdf_html(self, quote_data: Dict[str, Any], operations: List[Dict[str, Any]],
                          pricing_data: Dict[str, Any]) -> str:
        """Generate HTML content for PDF export"""
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>ShopQuote - {quote_data.get('quote_number', 'Quote')}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        .header {{ text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }}
        .section {{ margin: 20px 0; }}
        .section h3 {{ color: #1976d2; border-bottom: 1px solid #ddd; padding-bottom: 5px; }}
        table {{ width: 100%; border-collapse: collapse; margin: 10px 0; }}
        th, td {{ padding: 8px; text-align: left; border: 1px solid #ddd; }}
        th {{ background-color: #f5f5f5; }}
        .pricing-table {{ margin-top: 20px; }}
        .footer {{ margin-top: 40px; font-size: 12px; color: #666; text-align: center; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üè≠ ShopQuote</h1>
        <h2>Quote #{quote_data.get('quote_number', 'N/A')}</h2>
    </div>

    <div class="section">
        <h3>Quote Information</h3>
        <p><strong>Customer:</strong> {quote_data.get('customer', 'N/A')}</p>
        <p><strong>Part Number:</strong> {quote_data.get('part_number', 'N/A')}</p>
        <p><strong>Description:</strong> {quote_data.get('description', 'N/A')}</p>
        <p><strong>Material:</strong> {quote_data.get('material', 'N/A')}</p>
        <p><strong>Thickness:</strong> {quote_data.get('thickness_in', 'N/A')} in</p>
    </div>

    <div class="section">
        <h3>Operations Breakdown</h3>
        <table>
            <tr>
                <th>Seq</th>
                <th>Operation</th>
                <th>Setup (min)</th>
                <th># Ops</th>
                <th>Time (sec)</th>
                <th>$/Part</th>
            </tr>
"""

        for op in operations:
            html += f"""
            <tr>
                <td>{op.get('seq', '')}</td>
                <td>{op.get('operation', '')}</td>
                <td>{op.get('setup_min', 0)}</td>
                <td>{op.get('ops', 1)}</td>
                <td>{op.get('time_sec', 0)}</td>
                <td>${op.get('cost_per_part', 0.0):.2f}</td>
            </tr>
"""

        html += """
        </table>
    </div>
"""

        # Hardware section
        hardware = quote_data.get('hardware', [])
        if hardware:
            html += """
    <div class="section">
        <h3>Hardware</h3>
        <ul>
"""
            for hw in hardware:
                html += f"            <li>{hw.get('type', 'HW')} (x{hw.get('qty_per_part', 1)}) - ${hw.get('unit_cost', 0.0):.2f} each</li>\n"
            html += "        </ul>\n    </div>\n"

        # Outside processes section
        outside_processes = quote_data.get('outside_processes', [])
        if outside_processes:
            html += """
    <div class="section">
        <h3>Outside Processes</h3>
        <ul>
"""
            for op in outside_processes:
                html += f"            <li>{op.get('label', 'Process')} - ${op.get('unit_cost_per_part', 0.0):.2f} per part</li>\n"
            html += "        </ul>\n    </div>\n"

        # Pricing section
        if pricing_data:
            html += """
    <div class="section">
        <h3>Pricing Summary</h3>
        <table class="pricing-table">
            <tr>
                <th>Quantity</th>
                <th>Price per Part</th>
            </tr>
"""
            quantities = [1, 10, 25, 50]
            for qty in quantities:
                price = pricing_data.get('per_qty_grand', {}).get(qty, 0.0)
                html += f"""
            <tr>
                <td>{qty}</td>
                <td>${price:.2f}</td>
            </tr>
"""
            html += "        </table>\n    </div>\n"

        # Footer
        html += f"""
    <div class="footer">
        Generated by ShopQuote on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    </div>
</body>
</html>
"""

        return html

    def list_exports(self) -> List[str]:
        """List all exported files"""
        try:
            return [f.name for f in self.export_dir.glob("*") if f.is_file()]
        except Exception:
            return []

# Global export manager instance
_export_manager = None

def get_export_manager() -> ExportManager:
    """Get the global export manager instance"""
    global _export_manager
    if _export_manager is None:
        _export_manager = ExportManager()
    return _export_manager